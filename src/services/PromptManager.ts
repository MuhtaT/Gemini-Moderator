import * as fs from 'fs';
import * as path from 'path';

export interface ChatPrompt {
  chatId: number;
  title?: string;
  singleMessagePrompt?: string;
  batchMessagePrompt?: string;
  updatedAt: number;
  updatedBy: number;
}

export class PromptManager {
  private customPrompts: Map<number, ChatPrompt> = new Map();
  private promptsFile: string;
  private dataDir: string;

  constructor(dataDir: string = 'data') {
    this.dataDir = path.resolve(process.cwd(), dataDir);
    this.promptsFile = path.join(this.dataDir, 'custom_prompts.json');
    this.ensureDataDirExists();
    this.loadPrompts();
  }

  private ensureDataDirExists(): void {
    try {
      if (!fs.existsSync(this.dataDir)) {
        fs.mkdirSync(this.dataDir, { recursive: true });
        console.log(`–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: ${this.dataDir}`);
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö ${this.dataDir}:`, error);
    }
  }

  private loadPrompts(): void {
    try {
      if (fs.existsSync(this.promptsFile)) {
        const data = fs.readFileSync(this.promptsFile, 'utf-8');
        if (data && data.trim() !== '') {
          const prompts = JSON.parse(data) as ChatPrompt[];
          this.customPrompts.clear();
          prompts.forEach(prompt => {
            this.customPrompts.set(prompt.chatId, prompt);
          });
          console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.customPrompts.size} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ ${this.promptsFile}`);
        } else {
          console.log(`–§–∞–π–ª –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ ${this.promptsFile} –ø—É—Å—Ç, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.`);
          this.customPrompts.clear();
          this.savePrompts();
        }
      } else {
        console.log(`–§–∞–π–ª –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${this.promptsFile}, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.`);
        this.customPrompts.clear();
        this.savePrompts();
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ ${this.promptsFile}:`, error);
      this.customPrompts.clear();
    }
  }

  private savePrompts(): void {
    try {
      const prompts = Array.from(this.customPrompts.values());
      fs.writeFileSync(this.promptsFile, JSON.stringify(prompts, null, 2), 'utf-8');
      console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${prompts.length} –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ ${this.promptsFile}`);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ ${this.promptsFile}:`, error);
    }
  }

  hasCustomPrompt(chatId: number): boolean {
    return this.customPrompts.has(chatId);
  }

  getCustomPrompt(chatId: number): ChatPrompt | undefined {
    return this.customPrompts.get(chatId);
  }

  getSingleMessagePrompt(chatId: number): string | undefined {
    return this.customPrompts.get(chatId)?.singleMessagePrompt;
  }

  getBatchMessagePrompt(chatId: number): string | undefined {
    return this.customPrompts.get(chatId)?.batchMessagePrompt;
  }

  setCustomPrompt(chatId: number, updatedBy: number, title?: string, singleMessagePrompt?: string, batchMessagePrompt?: string): boolean {
    const existingPrompt = this.customPrompts.get(chatId);
    
    if (existingPrompt) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç
      this.customPrompts.set(chatId, {
        ...existingPrompt,
        title: title || existingPrompt.title,
        singleMessagePrompt: singleMessagePrompt !== undefined ? singleMessagePrompt : existingPrompt.singleMessagePrompt,
        batchMessagePrompt: batchMessagePrompt !== undefined ? batchMessagePrompt : existingPrompt.batchMessagePrompt,
        updatedAt: Date.now(),
        updatedBy
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
      this.customPrompts.set(chatId, {
        chatId,
        title,
        singleMessagePrompt,
        batchMessagePrompt,
        updatedAt: Date.now(),
        updatedBy
      });
    }
    
    this.savePrompts();
    return true;
  }

  removeCustomPrompt(chatId: number): boolean {
    if (!this.customPrompts.has(chatId)) {
      return false;
    }
    
    this.customPrompts.delete(chatId);
    this.savePrompts();
    return true;
  }

  getAllCustomPrompts(): ChatPrompt[] {
    return Array.from(this.customPrompts.values());
  }

  formatCustomPromptsForDisplay(): string {
    const prompts = this.getAllCustomPrompts();
    
    if (prompts.length === 0) {
      return "–°–ø–∏—Å–æ–∫ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –ø—É—Å—Ç.";
    }
    
    return prompts.map((prompt, index) => {
      const date = new Date(prompt.updatedAt).toLocaleString('ru-RU');
      const hasSinglePrompt = prompt.singleMessagePrompt ? "‚úì" : "‚úó";
      const hasBatchPrompt = prompt.batchMessagePrompt ? "‚úì" : "‚úó";
      
      return `${index + 1}. –ß–∞—Ç: ${prompt.title || prompt.chatId}\n   –û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç: ${hasSinglePrompt} | –ë–∞—Ç—á –ø—Ä–æ–º–ø—Ç: ${hasBatchPrompt}\n   –û–±–Ω–æ–≤–ª–µ–Ω: ${date}`;
    }).join('\n\n');
  }

  formatCustomPromptForDisplay(chatId: number): string {
    const prompt = this.getCustomPrompt(chatId);
    if (!prompt) {
      return `–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —á–∞—Ç–∞ ${chatId} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`;
    }
    
    const title = prompt.title || String(chatId);
    const updatedAt = new Date(prompt.updatedAt).toLocaleString('ru-RU');
    
    let result = `üìù *–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —á–∞—Ç–∞ "${title}" (ID: ${chatId})*\n\n`;
    result += `‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${updatedAt}\n\n`;
    
    if (prompt.singleMessagePrompt) {
      const previewText = this.getPromptPreview(prompt.singleMessagePrompt);
      result += `‚úÖ *–û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç:* –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`;
      result += `–ù–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞: \`${previewText}\`\n\n`;
    } else {
      result += `‚ùå *–û–¥–∏–Ω–æ—á–Ω—ã–π –ø—Ä–æ–º–ø—Ç:* –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n`;
    }
    
    if (prompt.batchMessagePrompt) {
      const previewText = this.getPromptPreview(prompt.batchMessagePrompt);
      result += `‚úÖ *–ë–∞—Ç—á-–ø—Ä–æ–º–ø—Ç:* –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n`;
      result += `–ù–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞: \`${previewText}\`\n\n`;
    } else {
      result += `‚ùå *–ë–∞—Ç—á-–ø—Ä–æ–º–ø—Ç:* –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n\n`;
    }
    
    return result;
  }
  
  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
   * @param prompt –¢–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
   * @returns –£–∫–æ—Ä–æ—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–º–ø—Ç–∞
   */
  private getPromptPreview(prompt: string): string {
    if (!prompt) return '';
    
    // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤
    const maxLength = 50;
    let previewText = prompt.replace(/\n/g, ' ').trim();
    
    if (previewText.length > maxLength) {
      previewText = previewText.substring(0, maxLength) + '...';
    }
    
    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã Markdown
    return previewText.replace(/[_*[\]()~`>#+\-=|{}.!]/g, '\\$&');
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤
   * @param isBatchPrompt –ï—Å–ª–∏ true, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ç—á-–ø—Ä–æ–º–ø—Ç–∞, –∏–Ω–∞—á–µ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
   * @returns –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
   */
  getAvailablePromptVariables(isBatchPrompt: boolean = false): string {
    if (isBatchPrompt) {
      return `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –±–∞—Ç—á-–ø—Ä–æ–º–ø—Ç–∞:
      
\${messages} - —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
\${messageCount} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞—Ç—á–µ
\${chatId} - ID —á–∞—Ç–∞
\${model} - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "gemini-2.0-flash")
\${date} - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π \${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ \${chatId}..."`;
    } else {
      return `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:
      
\${messageText} - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
\${userName} - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
\${userBio} - –±–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
\${hasAvatar} - –Ω–∞–ª–∏—á–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ (true/false)
\${suspiciousProfile} - –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å (true/false)
\${suspicionReason} - –ø—Ä–∏—á–∏–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
\${messageId} - ID —Å–æ–æ–±—â–µ–Ω–∏—è
\${chatId} - ID —á–∞—Ç–∞
\${model} - –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "gemini-2.0-flash")
\${date} - —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: "–ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \${userName}: \${messageText}"`;
    }
  }
} 